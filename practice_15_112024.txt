lag and window function 
python.
rank function..


CREATE TABLE marks (
    student_id NUMBER PRIMARY KEY,
    name VARCHAR2(255) NOT NULL,
    branch VARCHAR2(255) NOT NULL,
    marks NUMBER CHECK (marks BETWEEN 0 AND 100)
);

CREATE SEQUENCE marks_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER marks_before_insert
BEFORE INSERT ON marks
FOR EACH ROW
BEGIN
    IF :new.student_id IS NULL THEN
        SELECT marks_seq.NEXTVAL INTO :new.student_id FROM dual;
    END IF;
END;

INSERT ALL
    INTO marks (name, branch, marks) VALUES ('Nitish', 'EEE', 82)
    INTO marks (name, branch, marks) VALUES ('Rishabh', 'EEE', 91)
    INTO marks (name, branch, marks) VALUES ('Anukant', 'EEE', 69)
    INTO marks (name, branch, marks) VALUES ('Rupesh', 'EEE', 55)
    INTO marks (name, branch, marks) VALUES ('Shubham', 'CSE', 78)
    INTO marks (name, branch, marks) VALUES ('Ved', 'CSE', 43)
    INTO marks (name, branch, marks) VALUES ('Deepak', 'CSE', 98)
    INTO marks (name, branch, marks) VALUES ('Arpan', 'CSE', 95)
    INTO marks (name, branch, marks) VALUES ('Vinay', 'ECE', 95)
    INTO marks (name, branch, marks) VALUES ('Ankit', 'ECE', 88)
    INTO marks (name, branch, marks) VALUES ('Anand', 'ECE', 81)
    INTO marks (name, branch, marks) VALUES ('Rohit', 'ECE', 95)
    INTO marks (name, branch, marks) VALUES ('Prashant', 'MECH', 75)
    INTO marks (name, branch, marks) VALUES ('Amit', 'MECH', 69)
    INTO marks (name, branch, marks) VALUES ('Sunny', 'MECH', 39)
    INTO marks (name, branch, marks) VALUES ('Gautam', 'MECH', 51)
select * from marks


INSERT INTO marks (name, branch, marks) VALUES ('Nitish', 'EEE', 82);
INSERT INTO marks (name, branch, marks) VALUES ('Rishabh', 'EEE', 91);
INSERT INTO marks (name, branch, marks) VALUES ('Anukant', 'EEE', 69);
INSERT INTO marks (name, branch, marks) VALUES ('Rupesh', 'EEE', 55);
INSERT INTO marks (name, branch, marks) VALUES ('Shubham', 'CSE', 78);
INSERT INTO marks (name, branch, marks) VALUES ('Ved', 'CSE', 43);
INSERT INTO marks (name, branch, marks) VALUES ('Deepak', 'CSE', 98);
INSERT INTO marks (name, branch, marks) VALUES ('Arpan', 'CSE', 95);
INSERT INTO marks (name, branch, marks) VALUES ('Vinay', 'ECE', 95);
INSERT INTO marks (name, branch, marks) VALUES ('Ankit', 'ECE', 88);
INSERT INTO marks (name, branch, marks) VALUES ('Anand', 'ECE', 81);
INSERT INTO marks (name, branch, marks) VALUES ('Rohit', 'ECE', 95);
INSERT INTO marks (name, branch, marks) VALUES ('Prashant', 'MECH', 75);
INSERT INTO marks (name, branch, marks) VALUES ('Amit', 'MECH', 69);
INSERT INTO marks (name, branch, marks) VALUES ('Sunny', 'MECH', 39);
INSERT INTO marks (name, branch, marks) VALUES ('Gautam', 'MECH', 51);


select branch,avg(marks) from marks group by branch

select avg(marks) from marks

SELECT 
    student_id,
    name,
    branch,
    marks,
    AVG(marks) OVER (partition by branch) AS avg_marks
FROM marks;

select count(*) from marks

select name,min(marks) over(),max(marks) over() from marks order by student_id



select * from marks order by student_id

SELECT student_id, name,branch,marks,min(marks) over(),max(marks) over(),min(marks) over(partition by branch), max(marks) over(partition by branch) from marks order by student_id

select * from (select student_id, name,branch,marks,avg(marks) over(partition by branch) as branch_avg
from marks) t
where t.marks > t.branch_avg


SELECT student_id, name,branch,marks,
rank() over(partition by branch order by marks desc),
dense_rank() over(partition by branch order by marks desc)
from marks

-------
SELECT student_id, name,branch,marks,branch || '-' ||row_number() over(order by branch)
from marks
---
CREATE TABLE goldusers_signup (userid INTEGER, gold_signup_date DATE);

INSERT INTO goldusers_signup (userid, gold_signup_date) 
VALUES (1, TO_DATE('2017-09-22', 'YYYY-MM-DD'));

INSERT INTO goldusers_signup (userid, gold_signup_date) 
VALUES (3, TO_DATE('2017-04-21', 'YYYY-MM-DD'));

CREATE TABLE users (userid INTEGER, signup_date DATE); 

INSERT INTO users (userid, signup_date) values (1, TO_DATE('2017-04-21', 'YYYY-MM-DD'))
INSERT INTO users (userid, signup_date) values (2, TO_DATE('2017-04-21', 'YYYY-MM-DD'))
INSERT INTO users (userid, signup_date) values (3, TO_DATE('2017-04-21', 'YYYY-MM-DD'))

VALUES 
    (1, '2017-09-22'),
    (3, '2017-04-21');
-----


first_value/last_value/nth_value

SELECT student_id, name,branch,marks,
first_value(name) over(order by marks desc)
from marks

SELECT student_id, name,branch,marks,
first_value(marks) over(order by marks desc)
from marks

SELECT student_id, name,branch,marks,
last_value(name) over(partition by branch order by marks desc rows between unbounded preceding and unbounded following)
from marks   
 
SELECT student_id, name,branch,marks,
last_value(marks) over(partition by branch order by marks desc rows between unbounded preceding and unbounded following)
from marks   

select name,marks from (SELECT student_id, name,branch,marks,
first_value(name) over(partition by branch order by marks desc) as topper_name,
first_value(marks) over(partition by branch order by marks desc) as topper_marks
from marks) t
where t.name = t.topper_name and t.marks = t.topper_marks


----------------

lag/lead

select student_id, name,branch,marks,
lag(marks) over(partition by branch order by student_id),
lead(marks) over(partition by branch order by student_id)
from marks


------------
select student_id, name,branch,marks,
lag(marks) over(partition by branch order by student_id),
lead(marks) over(partition by branch order by student_id)
from marks


SELECT student_id, name,branch,marks,
first_value(name) over(order by marks desc)
from marks

SELECT student_id, name,branch,marks,
first_value(marks) over(order by marks desc)
from marks

SELECT student_id, name,branch,marks,
last_value(name) over(partition by branch order by marks desc rows between unbounded preceding and unbounded following)
from marks   
 
SELECT student_id, name,branch,marks,
last_value(marks) over(partition by branch order by marks desc rows between unbounded preceding and unbounded following)
from marks   

select name,marks from (SELECT student_id, name,branch,marks,
last_value(name) over (partition by branch order by marks desc rows between unbounded preceding and unbounded following) as topper_name,
last_value(marks) over(partition by branch order by marks desc rows between unbounded preceding and unbounded following) as topper_marks
from marks) t
where t.name = t.topper_name and t.marks = t.topper_marks
window w as (partition by branch order by marks desc rows between unbounded preceding and unbounded following)


select student_id, name,branch,marks,
lag(marks) over(partition by branch order by student_id),
lead(marks) over(partition by branch order by student_id)
from marks

introduction:

"I'm Subhash Sharma, originally from Haryana, but currently based in Noida. I completed both my graduation and post-graduation from Delhi University. After my studies, I focused on preparing for government exams, but during that period, the COVID-19 pandemic created some financial challenges. This prompted me to rethink my career path. On a friend's recommendation, I decided to shift gears and took the CDAC entrance exam, securing a rank of 121. I pursued a Post Graduate Diploma from CDAC, with the clear objective of entering the corporate sector, which I’m glad to have achieved.

In my current role, I primarily work with ETL tools. My job involves extracting data from databases according to client specifications, integrating it with Python and ARO to generate reports. This experience has deepened my understanding of data integration and reporting, and I'm eager to continue growing in this field.

Currently, I'm interviewing for the data analytics role in your company because I’m eager to gain deeper, hands-on experience with databases. My previous work with ETL tools and data integration has sparked a strong interest in data analytics, and I believe this role aligns perfectly with my career goals. I'm genuinely excited about this opportunity, and I’m eager to learn more while working under your guidance to grow in this field.



create table s1 (id int primary key,name varchar(50), value varchar(50));

alter table s1 add email varchar(50);

create table s2 (email varchar(50) primary key);

desc s1

ALTER TABLE s1
ADD CONSTRAINT fk_customer 
FOREIGN KEY (email) 
REFERENCES s2(email);

desc s2
drop table s1

insert into s2 (email)values('subhash.sharma@gmail.com')
insert into s2 (email)values('sharma@gmail.com')

delete from s2 where email = 'sharma@gmail.com'
select lpad(email,30,'*') from s2

select rpad(email,30,'$') as "pad email" from s2

select * from s2

SELECT * FROM user_constraints WHERE table_name = 'S1';

show tables from WKSP_SUBHASH05

alter table s2 rename column email to email2

desc s2